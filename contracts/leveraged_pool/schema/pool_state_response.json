{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PoolStateResponse",
  "description": "Operational data, changing as pool usage changes",
  "type": "object",
  "required": [
    "assets_in_reserve",
    "opening_snapshot",
    "total_asset_pool_share",
    "total_leveraged_assets",
    "total_leveraged_pool_share"
  ],
  "properties": {
    "assets_in_reserve": {
      "description": "Backing assets provided by both minters and providers",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "opening_snapshot": {
      "description": "Price at \"opening\" (since leverage was reset)",
      "allOf": [
        {
          "$ref": "#/definitions/PriceSnapshot"
        }
      ]
    },
    "total_asset_pool_share": {
      "description": "Total share of all assets\n\nTODO is this just assets_in_reserve?",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "total_leveraged_assets": {
      "description": "Minted assets",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "total_leveraged_pool_share": {
      "description": "Total share of all minted leveraged assets\n\nTODO is this just total_leveraged_assets?",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "definitions": {
    "PriceSnapshot": {
      "type": "object",
      "required": [
        "asset_price",
        "leveraged_price",
        "timestamp"
      ],
      "properties": {
        "asset_price": {
          "$ref": "#/definitions/Uint128"
        },
        "leveraged_price": {
          "$ref": "#/definitions/Uint128"
        },
        "timestamp": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
